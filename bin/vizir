#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), "..", "lib")

require 'eventmachine'
require 'growl'
require 'net/ssh/gateway'
require 'optparse'
require 'rest_client'
require 'vizir'

ALERT_PERIOD = 60
REFRESH_TIME = 3600

def usage
  puts 'usage: vizir [ -h | --help ] [ -l | --login login_name ]'
  exit 1
end

def setup_ssh_tunnel
  gateway = Net::SSH::Gateway.new('access.grenoble.grid5000.fr', $login)
  port = gateway.open('api.grenoble.grid5000.fr', 443)
  return gateway, port
end

def apiuri(port)
  return "https://localhost:#{port}/oargridapi"
end

def setup_growl
  $growl = Growl::Notifier.sharedInstance
  $growl.register('Vizir', ['Job ending soon'])
end

def notify_via_growl(jobid, site_name, time, time_unit)
  $growl.notify('Job ending soon', 'OAR job terminating soon', "Job #{jobid} in #{site_name} ending in #{time} #{time_unit}.", :sticky => true)
end

$login = nil
opts = OptionParser.new
opts.on('-h', '--help') { usage }
opts.on('-l', '--login STRING', String) { |str| $login = str }
opts.parse(ARGV)

if $login == nil
  usage
end

gateway, port = setup_ssh_tunnel
api = Vizir.get_api(apiuri(port))
setup_growl

# Learn the Grid'5000 sites
$jobs = Hash.new
$sites = Vizir.learn_sites(api, Vizir::IGNORED_SITES)
exit 1 if $sites == nil

Vizir.learn_new_jobs(api)
Vizir.alert_jobs(api)

EventMachine::run {
  EventMachine::PeriodicTimer.new(REFRESH_TIME) { Vizir.learn_new_jobs(api) }
  EventMachine::PeriodicTimer.new(ALERT_PERIOD) { Vizir.alert_jobs(api) }
}

gateway.shutdown!
