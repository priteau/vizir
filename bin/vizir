#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), "..", "lib")

require 'eventmachine'
require 'growl'
require 'net/ssh/gateway'
require 'optparse'
require 'rest_client'
require 'vizir'

$alert_period = 60
$refresh_period = 3600

def setup_ssh_tunnel
  gateway = Net::SSH::Gateway.new('access.grenoble.grid5000.fr', $login)
  port = gateway.open('api.grenoble.grid5000.fr', 443)
  return gateway, port
end

def apiuri(port)
  return "https://localhost:#{port}/oargridapi"
end

def setup_growl
  $growl = Growl::Notifier.sharedInstance
  $growl.register('Vizir', ['Job ending soon'])
end

def notify_via_growl(jobid, site_name, time, time_unit)
  $growl.notify('Job ending soon', 'OAR job terminating soon', "Job #{jobid} in #{site_name} ending in #{time} #{time_unit}.", :sticky => true)
end

$login = nil

opts = OptionParser.new do |opts|
  opts.banner = "Usage: vizir [options]"
  opts.separator("")

  opts.separator("Options:")
  opts.on('-a', '--alert-period TIME', Integer, "Job alert period (seconds), default: #{$alert_period}") { |t| $alert_period = t }
  opts.on('-h', '--help', 'Print help') do
    puts opts
    exit
  end
  opts.on('-l', '--login LOGIN', String, "User login on Grid\'5000") { |str| $login = str }
  opts.on('-m', '--min-job-time TIME', Integer, "Minimum job time (seconds), default: #{$refresh_period}") { |t| $refresh_period = t }
end

opts.parse!(ARGV)

if $login == nil
  puts opts
  exit
end

gateway, port = setup_ssh_tunnel
api = Vizir.get_api(apiuri(port))
setup_growl

# Learn the Grid'5000 sites
$jobs = Hash.new
$sites = Vizir.learn_sites(api, Vizir::IGNORED_SITES)
exit 1 if $sites == nil

Vizir.learn_new_jobs(api)
Vizir.alert_jobs(api)

EventMachine::run {
  EventMachine::PeriodicTimer.new($refresh_period) { Vizir.learn_new_jobs(api) }
  EventMachine::PeriodicTimer.new($alert_period) { Vizir.alert_jobs(api) }
}

gateway.shutdown!
