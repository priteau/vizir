#!/usr/bin/env ruby -w

require 'json'
require 'net/ssh/gateway'
require 'optparse'
require 'rest_client'
require 'ruby-growl'

ALERT_TIME = 600
IGNORE_SITES = ['grenoble-exp', 'grenoble-ext', 'grenoble-obs', 'luxembourg', 'portoalegre']

def usage
  puts 'usage: vizir [ -h | --help ] [ -l | --login login_name ] [ -p | --password mygrowlpassword ]'
  exit 1
end

def get(api, uri)
  begin
    return JSON.parse(api[uri + '?structure=simple'].get(:accept => 'application/json'))
  rescue => e
    if e.respond_to?('http_code')
      puts "Error: #{e.http_code}:\n #{e.response.body}"
      return nil
    else
      puts e.inspect
      exit 1
    end
  end
end

def setup_ssh_tunnel
  gateway = Net::SSH::Gateway.new('access.grenoble.grid5000.fr', $login)
  port = gateway.open('api.grenoble.grid5000.fr', 443)
  return gateway, port
end

def apiuri(port)
  return "https://localhost:#{port}/oargridapi"
end

def notify_via_growl(jobid, site_name, time, time_unit)
  g = Growl.new("localhost", "Vizir", ["Job ending soon"], nil, $password)
  g.notify("Job ending soon", "OAR job terminating soon", "Job #{jobid} in #{site_name} ending in #{time} #{time_unit}.")
end

def get_remaining_time(starttime, walltime)
  remaining_sec = (Time.at(starttime + walltime) - Time.now).round
end

def humanize_time(time)
  if time > 60 then
    remaining_time = time / 60
    remaining_time_unit = "minutes"
  else
    remaining_time = time
    remaining_time_unit = "seconds"
  end
  return remaining_time, remaining_time_unit
end

$login = nil
$password = nil
opts = OptionParser.new
opts.on('-h', '--help') { usage }
opts.on('-l', '--login STRING', String) { |str| $login = str }
opts.on('-p', '--password STRING', String) { |str| $password = str }
opts.parse(ARGV)

if $login == nil or $password == nil
  usage
end

gateway, port = setup_ssh_tunnel
api = RestClient::Resource.new(apiuri(port))

sites = get(api, '/sites')
if sites == nil then
  exit 1
end
sites.each do |site|
  site_name = site['site']
  unless IGNORE_SITES.include?(site_name)
    jobs = get(api, "#{site['uri']}/jobs")
    if jobs == nil then
      break
    end
    jobs.each do |job|
      if job['owner'] == $login then
        job_details = get(api, "#{job['uri']}")
        if job_details == nil then
          break
        end
        if job_details['jobType'] == 'INTERACTIVE' then
          remaining_sec = get_remaining_time(Integer(job_details['startTime']), Integer(job_details['walltime']))
          if remaining_sec < ALERT_TIME then
            remaining_time, remaining_time_unit = humanize_time(remaining_sec)
            notify_via_growl(job_details['Job_Id'], site_name.capitalize, remaining_time, remaining_time_unit)
          end
        end
      end
    end
  end
end

gateway.shutdown!
